# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy_learn_moralis

on:
  push:
    branches: [ "learn-moralis" ]


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v1
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        env:
            NEXT_PUBLIC_MORALIS_APPLICATION_ID: ${{ secrets.NEXT_PUBLIC_MORALIS_APPLICATION_ID }}
            NEXT_PUBLIC_MORALIS_SERVER_URL: ${{ secrets.NEXT_PUBLIC_MORALIS_SERVER_URL }}
      - name: Static HTML export with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1


# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./
        
#     steps:
#       - name: Checkout üõéÔ∏è
#         uses: actions/checkout@v2 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.
#         with:
#           persist-credentials: false

#       - name: Cache  üíæ
#         uses: actions/cache@v2
#         with:
#           path: ${{ github.workspace }}/.next/cache
#           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}
#       - name: Install and Build üîß # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
#         uses: actions/setup-node@v1
#       - run: npm install
#       - run: npx next build && npx next export  # && touch out/server/pages/.nojekyll && cp -a out/server/static/. out/server/pages/_next
#         env:
#             NEXT_PUBLIC_MORALIS_APPLICATION_ID: ${{ secrets.NEXT_PUBLIC_MORALIS_APPLICATION_ID }}
#             NEXT_PUBLIC_MORALIS_SERVER_URL: ${{ secrets.NEXT_PUBLIC_MORALIS_SERVER_URL }}
#             CI: true
#             GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }}

#       - name: Deploy üöÄ
#         uses: JamesIves/github-pages-deploy-action@3.6.2
#         with:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           BRANCH: gh-pages # The branch the action should deploy to.
#           FOLDER: out # The folder the action should deploy.
#           CLEAN: true # Automatically remove deleted files from the deploy branch
